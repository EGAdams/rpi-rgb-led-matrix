CXX = g++

# for optimization 
# CXXFLAGS = -std=c++17 -Wall -O3 -g -I../include

# for debugging
CXXFLAGS = -std=c++17 -Wall -O0 -g -I../include
# CXXFLAGS = -std=c++17 -Wall -O0 -g -I../include -I. -IRemoteListenerContext -IScoreBoard




# Linker flags:
#   -L../lib        : tells the linker to look in ../lib for libraries
#   -lrgbmatrix     : link against the rpi-rgb-led-matrix library
#   -ljsoncpp       : link against the JSON library
#   -lrt -lm -lpthread : usual system libraries (realtime, math, pthreads)
LDFLAGS = -L../lib -lrgbmatrix -ljsoncpp -lcurl -lrt -lm -lpthread

# Target executable
TARGET = run_remote_listener

# Source files (ALPHABETIZED)
SOURCES = \
  AfterMatchWinState/AfterMatchWinState.cpp \
  BatteryTest/BatteryTest.cpp \
  BlankBlinker/BlankBlinker.cpp \
  CanvasCreator/CanvasCreator.cpp \
  ColorManager/ColorManager.cpp \
  ConsoleDisplay/ConsoleDisplay.cpp \
  Drawer/Drawer.cpp \
  FetchRunner/FetchRunner.cpp \
  FontLoader/FontLoader.cpp \
  GameLedTranslator/GameLedTranslator.cpp \
  GameLeds/GameLeds.cpp \
  GameModes/GameModes.cpp \
  GameObject/GameObject.cpp \
  GameState/GameState.cpp \
  GameTimer/GameTimer.cpp \
  GameWinSequence/GameWinSequence.cpp \
  History/History.cpp \
  IInputWithTimer/IInputWithTimer.cpp \
  IRemoteListenerState/IRemoteListenerState.cpp \
  Inputs/Inputs.cpp \
  KeyboardGameInput/KeyboardGameInput.cpp \
  KeyboardInputWithTimer/KeyboardInputWithTimer.cpp \
  LogObject/LogObject.cpp \
  LogObjectFactory/LogObjectFactory.cpp \
  Logger/Logger.cpp \
  LoggerFactory/LoggerFactory.cpp \
  MatchWinBlinker/MatchWinBlinker.cpp \
  MatchWinBlinkState/MatchWinBlinkState.cpp \
  MatchWinSequence/MatchWinSequence.cpp \
  Mode1Functions/Mode1Functions.cpp \
  Mode1Score/Mode1Score.cpp \
  Mode2Functions/Mode2Functions.cpp \
  Model/Model.cpp \
  MonitorLed/MonitorLed.cpp \
  MonitorLedClassObject/MonitorLedClassObject.cpp \
  MonitoredObject/MonitoredObject.cpp \
  PairingBlinker/PairingBlinker.cpp \
  PairingModeState/PairingModeState.cpp \
  PinInterface/PinInterface.cpp \
  PinState/PinState.cpp \
  Player/Player.cpp \
  PointLeds/PointLeds.cpp \
  RegularGamePlayAfterScoreState/RegularGamePlayAfterScoreState.cpp \
  RegularGamePlayBeforeScoreState/RegularGamePlayBeforeScoreState.cpp \
  RemoteGameInput/RemoteGameInput.cpp \
  RemoteInputWithTimer/RemoteInputWithTimer.cpp \
  RemoteListenerContext/RemoteListenerContext.cpp \
  RemoteLocker/RemoteLocker.cpp \
  RemotePairingScreen/RemotePairingScreen.cpp \
  Reset/Reset.cpp \
  ScoreBoard/ScoreBoard.cpp \
  ScoreboardBlinker/ScoreboardBlinker.cpp \
  ServeLeds/ServeLeds.cpp \
  SetDrawer/SetDrawer.cpp \
  SetHistoryText/SetHistoryText.cpp \
  SetLeds/SetLeds.cpp \
  SetWin/SetWin.cpp \
  SleepModeState/SleepModeState.cpp \
  SourceData/SourceData.cpp \
  StateMachine/StateMachine.cpp \
  SubjectManager/SubjectManager.cpp \
  TieBreaker/TieBreaker.cpp \
  TieLeds/TieLeds.cpp \
  TranslateConstant/TranslateConstant.cpp \
  Undo/Undo.cpp \
  UndoState/UndoState.cpp \
  WatchTimer/WatchTimer.cpp \
  WebLiquidCrystal/WebLiquidCrystal.cpp \
  WinSequences/WinSequences.cpp \
  run_remote_listener.cpp  # <-- Make sure this is last and contains `main()`

# Object files
OBJECTS = $(SOURCES:.cpp=.o)

# Pattern rule to compile .cpp to .o
%.o: %.cpp
	$(CXX) $(CXXFLAGS) -c $< -o $@

# Default rule to build the target
$(TARGET): $(OBJECTS)
	$(CXX) $(CXXFLAGS) $(OBJECTS) $(LDFLAGS) -o $(TARGET)

# Corrected test file path
TEST_SOURCES = \
  PairingModeState/PairingModeStateTest.cpp

TEST_OBJECTS = $(TEST_SOURCES:.cpp=.o)

# Rule to compile the test object
PairingModeState/PairingModeStateTest.o: PairingModeState/PairingModeStateTest.cpp
	$(CXX) $(CXXFLAGS) -c $< -o $@

# Rule to build the test executable
PairingModeStateTest: PairingModeState/PairingModeStateTest.o $(OBJECTS)
	$(CXX) $(CXXFLAGS) PairingModeState/PairingModeStateTest.o $(OBJECTS) $(LDFLAGS) -lgtest -lgtest_main -pthread -o PairingModeStateTest

# Clean target
.PHONY: clean
clean:
	rm -f $(TARGET) $(OBJECTS) PairingModeStateTest PairingModeState/PairingModeStateTest.o
	rm -f *~  # Remove only temporary backup files, not headers!

