You are an expert C++ developer.

Here is my PinState.h file:
``` .h
#ifndef PININTERFACE_H
#define PININTERFACE_H

#include "../PinState/PinState.h"
#include "../Arduino/Arduino.h"
#include <map>

class PinInterface {
  public:
    PinInterface(PinState* pinState);
    ~PinInterface();
    void pinAnalogWrite(int pin, int value);
    void pinDigitalWrite(int pin, int value);
    int pinAnalogRead(int pin);
    int pinDigitalRead(int pin);
    std::map<std::string, int> getPinStateMap();

  private:
    std::map<std::string, int> _pin_map;
    PinState* _pinState;
};

#endif
```

Here is my PinInterface.cpp file:
``` .cpp
#include "PinInterface.h"
#include <string>

PinInterface::PinInterface( PinState* pinState ) : _pinState( pinState ) {}
PinInterface::~PinInterface() {}

int PinInterface::pinAnalogRead( int pin ) {
    std::string pin_string = std::to_string( pin );
    int pin_value = _pinState->getPinState( pin_string );
    return pin_value; }

int PinInterface::pinDigitalRead( int pin ) {
    int pin_value = _pinState->getPinState( std::to_string( pin ));
    return pin_value; }

void PinInterface::pinAnalogWrite( int pin, int value ) { _pinState->setPinState( std::to_string( pin ), value ); }

void PinInterface::pinDigitalWrite( int pin, int value ) { _pinState->setPinState( std::to_string( pin ), value ); }

std::map<std::string, int> PinInterface::getPinStateMap() { return _pin_map; }
```

Here is my Makefile:
``` make file
CFLAGS=-Wall -O3 -g -Wextra -Wno-unused-parameter
CXXFLAGS=$(CFLAGS)
OBJECTS=PinInterface.o TranslateConstant.o POINT_LEDs.o Arduino.o CanvasCreator.o FontLoader.o NumberDrawer.o TextDrawer.o GameTimer.o Logger.o History.o GameState.o ScoreBoard.o Player.o tennis-game.o
BINARIES=tennis-game

# Where our library resides. It is assumed here that $(RGB_LIB_DISTRIBUTION) has a
# compiled library in lib/
RGB_LIB_DISTRIBUTION=..
RGB_INCDIR=$(RGB_LIB_DISTRIBUTION)/include
RGB_LIBDIR=$(RGB_LIB_DISTRIBUTION)/lib
RGB_LIBRARY_NAME=rgbmatrix
RGB_LIBRARY=$(RGB_LIBDIR)/lib$(RGB_LIBRARY_NAME).a
LDFLAGS+=-L$(RGB_LIBDIR) -l$(RGB_LIBRARY_NAME) -lrt -lm -lpthread

# To compile image-example
MAGICK_CXXFLAGS?=$(shell GraphicsMagick++-config --cppflags --cxxflags)
MAGICK_LDFLAGS?=$(shell GraphicsMagick++-config --ldflags --libs)

all : $(BINARIES)

$(RGB_LIBRARY): FORCE
	$(MAKE) -C $(RGB_LIBDIR)

tennis-game: $(OBJECTS)
	$(CXX) $^ -o $@ $(LDFLAGS)

CanvasCreator.o : CanvasCreator/CanvasCreator.cpp
	$(CXX) -I$(RGB_INCDIR) $(CXXFLAGS) -c -o $@ $<

FontLoader.o : FontLoader/FontLoader.cpp
	$(CXX) -I$(RGB_INCDIR) $(CXXFLAGS) -c -o $@ $<

NumberDrawer.o : NumberDrawer/NumberDrawer.cpp
	$(CXX) -I$(RGB_INCDIR) $(CXXFLAGS) -c -o $@ $<

TextDrawer.o : TextDrawer/TextDrawer.cpp
	$(CXX) -I$(RGB_INCDIR) $(CXXFLAGS) -c -o $@ $<

GameTimer.o : GameTimer/GameTimer.cpp
	$(CXX) -I$(RGB_INCDIR) -I../Arduino $(CXXFLAGS) -c -o $@ $<

GameState.o : GameState/GameState.cpp
	$(CXX) -I$(RGB_INCDIR) -I../Arduino $(CXXFLAGS) -c -o $@ $<

Arduino.o : Arduino/Arduino.cpp
	$(CXX) -I$(RGB_INCDIR) $(CXXFLAGS) -c -o $@ $<

Logger.o : Logger/Logger.cpp
	$(CXX) -I$(RGB_INCDIR) $(CXXFLAGS) -c -o $@ $<

History.o : History/History.cpp
	$(CXX) -I$(RGB_INCDIR) $(CXXFLAGS) -c -o $@ $<

ScoreBoard.o : ScoreBoard/ScoreBoard.cpp
	$(CXX) -I$(RGB_INCDIR) $(CXXFLAGS) -c -o $@ $<

Player.o : Player/Player.cpp
	$(CXX) -I$(RGB_INCDIR) $(CXXFLAGS) -c -o $@ $<

PinInterface.o : PinInterface/PinInterface.cpp
	$(CXX) -I$(RGB_INCDIR) $(CXXFLAGS) -c -o $@ $<

TranslateConstant.o : TranslateConstant/TranslateConstant.cpp
	$(CXX) -I$(RGB_INCDIR) $(CXXFLAGS) -c -o $@ $<

POINT_LEDs.o : POINT_LEDs/POINT_LEDs.cpp
	$(CXX) -I$(RGB_INCDIR) $(CXXFLAGS) -c -o $@ $<

tennis-game.o : tennis-game.cpp
	$(CXX) -I$(RGB_INCDIR) $(CXXFLAGS) -c -o $@ $<

clean:
	rm -f $(OBJECTS) $(BINARIES)

FORCE:
.PHONY: FORCE
```

Here is the output of make:
``` make output
g++ -I../include -Wall -O3 -g -Wextra -Wno-unused-parameter -c -o PinInterface.o PinInterface/PinInterface.cpp
g++ PinInterface.o TranslateConstant.o POINT_LEDs.o Arduino.o CanvasCreator.o FontLoader.o NumberDrawer.o TextDrawer.o GameTimer.o Logger.o History.o GameState.o ScoreBoard.o Player.o tennis-game.o -o tennis-game -L../lib -lrgbmatrix -lrt -lm -lpthread
/usr/bin/ld: PinInterface.o: in function `PinInterface::pinAnalogRead(int)':
/home/adamsl/rpi-rgb-led-matrix/tennis-game/PinInterface/PinInterface.cpp:9: undefined reference to `PinState::getPinState(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'
/usr/bin/ld: PinInterface.o: in function `PinInterface::pinDigitalRead(int)':
/home/adamsl/rpi-rgb-led-matrix/tennis-game/PinInterface/PinInterface.cpp:13: undefined reference to `PinState::getPinState(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'
/usr/bin/ld: PinInterface.o: in function `PinInterface::pinAnalogWrite(int, int)':
/home/adamsl/rpi-rgb-led-matrix/tennis-game/PinInterface/PinInterface.cpp:16: undefined reference to `PinState::setPinState(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int)'
/usr/bin/ld: PinInterface.o: in function `PinInterface::pinDigitalWrite(int, int)':
/usr/include/c++/11/bits/basic_string.h:195: undefined reference to `PinState::setPinState(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int)'
collect2: error: ld returned 1 exit status
make: *** [Makefile:25: tennis-game] Error 1
adamsl@DESKTOP-3U1EV9F:~/rpi-rgb-led-matrix/tennis-game$
```

Will you please let me know how to fix this problem?


Here is my PinState.h file:
``` .h
#ifndef PINSTATE_H
#define PINSTATE_H

#include "../Arduino/Arduino.h"
#include <map>
#include <fstream>
#include "../TranslateConstant/TranslateConstant.h"

class PinState {
public:
    PinState( std::map< std::string, int > pinMap );
    ~PinState();
    void setPinState( std::string pin, int state );
    int getPinState( std::string pin );
    void clear();
    std::map<std::string, int> getMap();

private:
    std::map< std::string, int > _pin_map;
    TranslateConstant _translateConstant;
};

#endif
```

Here is my PinState.cpp file:
``` .cpp
#include "PinState.h"
#include "Arduino.h"

PinState::PinState( std::map< std::string, int > pin_map ) : _pin_map( pin_map ) {}
PinState::~PinState() {}

int PinState::getPinState( std::string pin ) {
    if ( _translateConstant.get_translated_constant( std::stoi( pin ) ) == "ROTARY" ) {
        std::string pin_file_path = "pin_data";
        std::cout << "translating pin: " << pin << "... " << std::endl;
        std::ifstream pin_file( pin_file_path + _translateConstant.get_translated_constant( std::stoi( pin ) ) + ".txt" );
        pin_file >> pin;
        pin_file.close();
        std::cout << "got pin " << pin << " from file" << std::endl;
        return std::stoi( pin );
    } else {
        std::cout << "translated constant: " << _translateConstant.get_translated_constant( std::stoi( pin ) ) << std::endl;
    }
    return _pin_map[ pin ];
}

void PinState::setPinState( std::string pin, int state ) {
    _pin_map[ pin ] = state;
    std::string pin_file_path = "pin_data";
    std::ofstream pin_file( pin_file_path + _translateConstant.get_translated_constant( std::stoi( pin ) ) + ".txt" );
    pin_file << state;
    pin_file.close();
}
#endif

void PinState::clear() {
    _pin_map.clear();
}

std::map<std::string, int> PinState::getMap() {
    return _pin_map;
}
```

Does this help us with debugging?


